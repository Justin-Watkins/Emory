scale = 1,
width = 8,
height = 6,
dpi = 300
)
f_get_sales(50)
f_get_sales(55)
fit
x_label  <- ('\n Price')
y_label  <- ('Ticket Sales \n')
title   <- ('Ticket Sales by Price')
ggplot2::ggplot(data  = sales,
aes(x = price,
y = sales))                     +
geom_point(size = 1,color = 'steelblue4')           +
scale_x_continuous(label = scales::dollar)          +
xlab(x_label)                                       +
ylab(y_label)                                       +
ggtitle(title)                                      +
graphics_theme_1                                    +
geom_line(color = "steelblue4")                     +
stat_smooth(method = "lm", color = 'coral',
formula = y ~ x + poly(x, 2)-1, se = F) +
geom_hline(yintercept = f_get_sales(61.15909),
lty = 2, size = .9)                      +
geom_vline(xintercept = 61.15909,
lty = 2, size = .9)                      +
coord_cartesian(ylim = c(0,120))
ggsave(
'images/prf_max.png',
plot = last_plot(),
device = NULL,
scale = 1,
width = 8,
height = 6,
dpi = 300
)
max(estimated_revenue$totalRevenue)
View(estimated_revenue)
x <- 1
revenue <- list()
while(x <= nrow(estimated_revenue)){
revenue[x] <- estimated_revenue[x,2] * estimated_revenue[x,4]
x <- x + 1
}
estimated_revenue$totalRevenue <- unlist(revenue)
View(estimated_revenue)
View(estimated_revenue)
View(estimated_revenue)
View(estimated_revenue)
View(estimated_revenue)
source("code/setup.R")
#-------------------------------------------------------------------------------
# Load data sets
#-------------------------------------------------------------------------------
past_seasons <- vroom::vroom('data/top_down_season_data.csv')
data_2025    <- vroom::vroom('data/top_down_future_data.csv')
source("code/setup.R")
#-------------------------------------------------------------------------------
# Load data sets
#-------------------------------------------------------------------------------
# Build a simple data set
price <- as.data.frame(round(rbeta(4000,5,3)*100,0))
sales <- as.data.frame(table(price))
names(sales) <- c("price","sales")
sales$price <- as.numeric(as.character(sales$price))
str(sales)
#-------------------------------------------------------------------------------
# The Price response function
#-------------------------------------------------------------------------------
x_label  <- ('\n Price')
y_label  <- ('Ticket Sales \n')
title    <- ('Ticket Sales by Price')
ggplot2::ggplot(data  = sales,
aes(x = price,
y = sales))                 +
geom_point(size = 1,color = 'steelblue4')       +
scale_x_continuous(label = scales::dollar)      +
xlab(x_label)                                   +
ylab(y_label)                                   +
ggtitle(title)                                  +
graphics_theme_1                                +
geom_line(color = "steelblue4")                 +
geom_smooth(method = 'lm',se =F,
color = "coral")
ggsave(
'images/prf_linear.png',
plot = last_plot(),
device = NULL,
scale = 1,
width = 8,
height = 6,
dpi = 300
)
#-------------------------------------------------------------------------------
# The Price response function
#-------------------------------------------------------------------------------
x_label  <- ('\n Price')
y_label  <- ('Ticket Sales \n')
title    <- ('Ticket Sales by Price')
ggplot2::ggplot(data = sales,
aes(x = price,
y = sales))                       +
geom_point(size = 1,color = 'steelblue4')       +
scale_x_continuous(label = scales::dollar)      +
xlab(x_label)                                   +
ylab(y_label)                                   +
ggtitle(title)                                  +
graphics_theme_1                                +
geom_line(color = 'steelblue4')                 +
stat_smooth(method = "lm",color = 'coral',
formula = y ~ x + poly(x, 2)-1,
se = F)
ggsave(
'images/prf_poly.png',
plot = last_plot(),
device = NULL,
scale = 1,
width = 8,
height = 6,
dpi = 300
)
#-------------------------------------------------------------------------------
# Function to return sales based on price
#-------------------------------------------------------------------------------
f_get_poly_fit <- function(new_var,dist_fit){
len_poly   <- length(dist_fit$coefficients)
exponents  <- seq(1:(len_poly-1))
value_list <- list()
for(i in 1:length(exponents)){
value_list[i] <- coef(dist_fit)[i+1] * new_var^exponents[i]
}
sum(do.call(sum, value_list),coef(dist_fit)[1])
}
#-------------------------------------------------------------------------------
# Function to return sales based on price
#-------------------------------------------------------------------------------
old_prices      <- sales$price
estimated_sales <- sapply(old_prices, function(x) f_get_sales(x))
source("code/setup.R")
#-------------------------------------------------------------------------------
# Build data set
#-------------------------------------------------------------------------------
# Build a simple data set
price <- as.data.frame(round(rbeta(4000,5,3)*100,0))
sales <- as.data.frame(table(price))
names(sales) <- c("price","sales")
sales$price <- as.numeric(as.character(sales$price))
str(sales)
#-------------------------------------------------------------------------------
# The Price response function
#-------------------------------------------------------------------------------
x_label  <- ('\n Price')
y_label  <- ('Ticket Sales \n')
title    <- ('Ticket Sales by Price')
ggplot2::ggplot(data  = sales,
aes(x = price,
y = sales))                 +
geom_point(size = 1,color = 'steelblue4')       +
scale_x_continuous(label = scales::dollar)      +
xlab(x_label)                                   +
ylab(y_label)                                   +
ggtitle(title)                                  +
graphics_theme_1                                +
geom_line(color = "steelblue4")                 +
geom_smooth(method = 'lm',se =F,
color = "coral")
ggsave(
'images/prf_linear.png',
plot = last_plot(),
device = NULL,
scale = 1,
width = 8,
height = 6,
dpi = 300
)
#-------------------------------------------------------------------------------
# The Price response function
#-------------------------------------------------------------------------------
x_label  <- ('\n Price')
y_label  <- ('Ticket Sales \n')
title    <- ('Ticket Sales by Price')
ggplot2::ggplot(data = sales,
aes(x = price,
y = sales))                       +
geom_point(size = 1,color = 'steelblue4')       +
scale_x_continuous(label = scales::dollar)      +
xlab(x_label)                                   +
ylab(y_label)                                   +
ggtitle(title)                                  +
graphics_theme_1                                +
geom_line(color = 'steelblue4')                 +
stat_smooth(method = "lm",color = 'coral',
formula = y ~ x + poly(x, 2)-1,
se = F)
ggsave(
'images/prf_poly.png',
plot = last_plot(),
device = NULL,
scale = 1,
width = 8,
height = 6,
dpi = 300
)
#-------------------------------------------------------------------------------
# Function to return sales based on price
#-------------------------------------------------------------------------------
f_get_poly_fit <- function(new_var,dist_fit){
len_poly   <- length(dist_fit$coefficients)
exponents  <- seq(1:(len_poly-1))
value_list <- list()
for(i in 1:length(exponents)){
value_list[i] <- coef(dist_fit)[i+1] * new_var^exponents[i]
}
sum(do.call(sum, value_list),coef(dist_fit)[1])
}
#-------------------------------------------------------------------------------
# Function to return sales based on price
#-------------------------------------------------------------------------------
old_prices      <- sales$price
estimated_sales <- sapply(old_prices, function(x) f_get_poly_fit(x))
source("code/setup.R")
#-------------------------------------------------------------------------------
# Build data set
#-------------------------------------------------------------------------------
# Build a simple data set
price <- as.data.frame(round(rbeta(4000,5,3)*100,0))
sales <- as.data.frame(table(price))
names(sales) <- c("price","sales")
sales$price <- as.numeric(as.character(sales$price))
str(sales)
x_label  <- ('\n Price')
y_label  <- ('Ticket Sales \n')
title    <- ('Ticket Sales by Price')
ggplot2::ggplot(data  = sales,
aes(x = price,
y = sales))                 +
geom_point(size = 1,color = 'steelblue4')       +
scale_x_continuous(label = scales::dollar)      +
xlab(x_label)                                   +
ylab(y_label)                                   +
ggtitle(title)                                  +
graphics_theme_1                                +
geom_line(color = "steelblue4")                 +
geom_smooth(method = 'lm',se =F,
color = "coral")
ggsave(
'images/prf_linear.png',
plot = last_plot(),
device = NULL,
scale = 1,
width = 8,
height = 6,
dpi = 300
)
x_label  <- ('\n Price')
y_label  <- ('Ticket Sales \n')
title    <- ('Ticket Sales by Price')
ggplot2::ggplot(data = sales,
aes(x = price,
y = sales))                       +
geom_point(size = 1,color = 'steelblue4')       +
scale_x_continuous(label = scales::dollar)      +
xlab(x_label)                                   +
ylab(y_label)                                   +
ggtitle(title)                                  +
graphics_theme_1                                +
geom_line(color = 'steelblue4')                 +
stat_smooth(method = "lm",color = 'coral',
formula = y ~ x + poly(x, 2)-1,
se = F)
ggsave(
'images/prf_poly.png',
plot = last_plot(),
device = NULL,
scale = 1,
width = 8,
height = 6,
dpi = 300
)
x_label  <- ('\n Price')
y_label  <- ('Ticket Sales \n')
title    <- ('Ticket Sales by Price')
ggplot2::ggplot(data = sales,
aes(x = price,
y = sales))                       +
geom_point(size = 1,color = 'steelblue4')       +
scale_x_continuous(label = scales::dollar)      +
xlab(x_label)                                   +
ylab(y_label)                                   +
ggtitle(title)                                  +
graphics_theme_1                                +
geom_line(color = 'steelblue4')                 +
stat_smooth(method = "lm",color = 'coral',
formula = y ~ x + poly(x, 2)-1,
se = F)                             +
coord_cartesian(ylim = c(0,120))
ggsave(
'images/prf_poly.png',
plot = last_plot(),
device = NULL,
scale = 1,
width = 8,
height = 6,
dpi = 300
)
f_get_poly_fit <- function(new_var,dist_fit){
len_poly   <- length(dist_fit$coefficients)
exponents  <- seq(1:(len_poly-1))
value_list <- list()
for(i in 1:length(exponents)){
value_list[i] <- coef(dist_fit)[i+1] * new_var^exponents[i]
}
sum(do.call(sum, value_list),coef(dist_fit)[1])
}
old_prices      <- sales$price
estimated_sales <- sapply(old_prices, function(x) f_get_poly_fit(x))
source("code/setup.R")
#-------------------------------------------------------------------------------
# Build data set
#-------------------------------------------------------------------------------
# Build a simple data set
price <- as.data.frame(round(rbeta(4000,5,3)*100,0))
sales <- as.data.frame(table(price))
names(sales) <- c("price","sales")
sales$price <- as.numeric(as.character(sales$price))
str(sales)
#-------------------------------------------------------------------------------
# The Price response function
#-------------------------------------------------------------------------------
x_label  <- ('\n Price')
y_label  <- ('Ticket Sales \n')
title    <- ('Ticket Sales by Price')
ggplot2::ggplot(data  = sales,
aes(x = price,
y = sales))                 +
geom_point(size = 1,color = 'steelblue4')       +
scale_x_continuous(label = scales::dollar)      +
xlab(x_label)                                   +
ylab(y_label)                                   +
ggtitle(title)                                  +
graphics_theme_1                                +
geom_line(color = "steelblue4")                 +
geom_smooth(method = 'lm',se =F,
color = "coral")
ggsave(
'images/prf_linear.png',
plot = last_plot(),
device = NULL,
scale = 1,
width = 8,
height = 6,
dpi = 300
)
#-------------------------------------------------------------------------------
# The Price response function
#-------------------------------------------------------------------------------
x_label  <- ('\n Price')
y_label  <- ('Ticket Sales \n')
title    <- ('Ticket Sales by Price')
ggplot2::ggplot(data = sales,
aes(x = price,
y = sales))                       +
geom_point(size = 1,color = 'steelblue4')       +
scale_x_continuous(label = scales::dollar)      +
xlab(x_label)                                   +
ylab(y_label)                                   +
ggtitle(title)                                  +
graphics_theme_1                                +
geom_line(color = 'steelblue4')                 +
stat_smooth(method = "lm",color = 'coral',
formula = y ~ x + poly(x, 2)-1,
se = F)                             +
coord_cartesian(ylim = c(0,120))
ggsave(
'images/prf_poly.png',
plot = last_plot(),
device = NULL,
scale = 1,
width = 8,
height = 6,
dpi = 300
)
#-------------------------------------------------------------------------------
# Build Fit
#-------------------------------------------------------------------------------
fit <- lm(sales$sales~poly(sales$price,2,raw=TRUE))
#-------------------------------------------------------------------------------
# Function to return sales based on price
#-------------------------------------------------------------------------------
f_get_poly_fit <- function(new_var,dist_fit){
len_poly   <- length(dist_fit$coefficients)
exponents  <- seq(1:(len_poly-1))
value_list <- list()
for(i in 1:length(exponents)){
value_list[i] <- coef(dist_fit)[i+1] * new_var^exponents[i]
}
sum(do.call(sum, value_list),coef(dist_fit)[1])
}
old_prices      <- sales$price
estimated_sales <- sapply(old_prices, function(x) f_get_poly_fit(x,fit))
x_label  <- ('\n Price')
y_label  <- ('Ticket Sales \n')
title   <- ('Ticket Sales by Price')
ggplot2::ggplot(data  = sales,
aes(x = price,
y = sales))                     +
geom_point(size = 1,color = 'steelblue4')           +
scale_x_continuous(label = scales::dollar)          +
xlab(x_label)                                       +
ylab(y_label)                                       +
ggtitle(title)                                      +
graphics_theme_1                                    +
geom_line(color = "steelblue4")                     +
stat_smooth(method = "lm", color = 'coral',
formula = y ~ x + poly(x, 2)-1, se = F) +
geom_hline(yintercept = f_get_sales(61.15909),
lty = 2, size = .9)                      +
geom_vline(xintercept = 61.15909,
lty = 2, size = .9)                      +
coord_cartesian(ylim = c(0,120))
x_label  <- ('\n Price')
y_label  <- ('Ticket Sales \n')
title   <- ('Ticket Sales by Price')
ggplot2::ggplot(data  = sales,
aes(x = price,
y = sales))                     +
geom_point(size = 1,color = 'steelblue4')           +
scale_x_continuous(label = scales::dollar)          +
xlab(x_label)                                       +
ylab(y_label)                                       +
ggtitle(title)                                      +
graphics_theme_1                                    +
geom_line(color = "steelblue4")                     +
stat_smooth(method = "lm", color = 'coral',
formula = y ~ x + poly(x, 2)-1, se = F) +
geom_hline(yintercept = f_get_poly_fit(61.15909),
lty = 2, size = .9)                      +
geom_vline(xintercept = 61.15909,
lty = 2, size = .9)                      +
coord_cartesian(ylim = c(0,120))
x_label  <- ('\n Price')
y_label  <- ('Ticket Sales \n')
title   <- ('Ticket Sales by Price')
ggplot2::ggplot(data  = sales,
aes(x = price,
y = sales))                     +
geom_point(size = 1,color = 'steelblue4')           +
scale_x_continuous(label = scales::dollar)          +
xlab(x_label)                                       +
ylab(y_label)                                       +
ggtitle(title)                                      +
graphics_theme_1                                    +
geom_line(color = "steelblue4")                     +
stat_smooth(method = "lm", color = 'coral',
formula = y ~ x + poly(x, 2)-1, se = F) +
geom_hline(yintercept = f_get_poly_fit(61.15909,fit),
lty = 2, size = .9)                      +
geom_vline(xintercept = 61.15909,
lty = 2, size = .9)                      +
coord_cartesian(ylim = c(0,120))
ggsave(
'images/prf_max.png',
plot = last_plot(),
device = NULL,
scale = 1,
width = 8,
height = 6,
dpi = 300
)
estimated_prices <- seq(from = 25, to = 80, by = 1)
estimated_sales <- sapply(estimated_prices,
function(x) f_get_poly_fit(x,fit))
estimated_revenue <- tibble::tibble(
sales      = estimated_sales,
price      = estimated_prices,
revenue    = estimated_sales * estimated_prices,
totalSales = rev(cumsum(rev(sales)))
)
x <- 1
revenue <- list()
while(x <= nrow(estimated_revenue)){
revenue[x] <- estimated_revenue[x,2] * estimated_revenue[x,4]
x <- x + 1
}
estimated_revenue$totalRevenue <- unlist(revenue)
op_price <- estimated_revenue[which(estimated_revenue$totalRevenue ==
max(estimated_revenue$totalRevenue)),]$price
x_label  <- ('Price')
y_label  <- ('Total Revenue at Price Level')
title   <- ('Estimated Demand Curve at Each Price Level')
ggplot2::ggplot(data  = estimated_revenue,
aes(x = price,
y = totalRevenue))                +
geom_point(size = 1,color = 'steelblue4')           +
scale_x_continuous(label = scales::dollar)          +
scale_y_continuous(label = scales::dollar)          +
xlab(x_label)                                       +
ylab(y_label)                                       +
ggtitle(title)                                      +
graphics_theme_1                                    +
geom_line(color = "steelblue4")                     +
geom_vline(xintercept = op_price,lty = 2, size = .9)
ggsave(
'images/prf_rev_max.png',
plot = last_plot(),
device = NULL,
scale = 1,
width = 8,
height = 6,
dpi = 300
)
